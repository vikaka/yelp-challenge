else (Final_data$attributes_Delivery[i] <- "FALSE")
}
Final_data$attributes_Delivery<- as.factor(Final_data$attributes_Delivery)
for(i in 1:7692)
{
if(length(grep("\"Waiter Service\": true",Final_data$attributes[i]))>0 )
{
Final_data$attributes_Waiter_Service[i] <- "TRUE"
}
else (Final_data$attributes_Waiter_Service[i] <- "FALSE")
}
Final_data$attributes_Waiter_Service<- as.factor(Final_data$attributes_Waiter_Service)
for(i in 1:7692)
{
if(length(grep("\"Accepts Credit Cards\": true",Final_data$attributes[i]))>0 )
{
Final_data$attributes_Accepts_Credit_Cards[i] <- "TRUE"
}
else (Final_data$attributes_Accepts_Credit_Cards[i] <- "FALSE")
}
Final_data$attributes_Accepts_Credit_Cards<- as.factor(Final_data$attributes_Accepts_Credit_Cards)
for(i in 1:7692)
{
if(length(grep("\"Has TV\": true",Final_data$attributes[i]))>0 )
{
Final_data$attributes_Has_TV[i] <- "TRUE"
}
else (Final_data$attributes_Has_TV[i] <- "FALSE")
}
Final_data$attributes_Has_TV<- as.factor(Final_data$attributes_Has_TV)
for(i in 1:7692)
{
if(length(grep("\"Wheelchair Accessible\": true",Final_data$attributes[i]))>0 )
{
Final_data$attributes_Wheelchair_Accessible[i] <- "TRUE"
}
else (Final_data$attributes_Wheelchair_Accessible[i] <- "FALSE")
}
Final_data$attributes_Wheelchair_Accessible<- as.factor(Final_data$attributes_Wheelchair_Accessible)
for(i in 1:7692)
{
if(length(grep("\"Coat Check\": true",Final_data$attributes[i]))>0 )
{
Final_data$attributes_Coat_Check[i] <- "TRUE"
}
else (Final_data$attributes_Coat_Check[i] <- "FALSE")
}
Final_data$attributes_Coat_Check<- as.factor(Final_data$attributes_Coat_Check)
for(i in 1:7692)
{
if(length(grep("\"Happy Hour\": true",Final_data$attributes[i]))>0 )
{
Final_data$attributes_Happy_Hour[i] <- "TRUE"
}
else (Final_data$attributes_Happy_Hour[i] <- "FALSE")
}
Final_data$attributes_Happy_Hour<- as.factor(Final_data$attributes_Happy_Hour)
for(i in 1:7692)
{
if(length(grep("\"Good for Kids\": true",Final_data$attributes[i]))>0 )
{
Final_data$attributes_Good_for_Kids[i] <- "TRUE"
}
else (Final_data$attributes_Good_for_Kids[i] <- "FALSE")
}
Final_data$attributes_Good_for_Kids<- as.factor(Final_data$attributes_Good_for_Kids)
for(i in 1:7692)
{
if(length(grep("\"Outdoor Seating\": true",Final_data$attributes[i]))>0 )
{
Final_data$attributes_Outdoor_Seating[i] <- "TRUE"
}
else (Final_data$attributes_Outdoor_Seating[i] <- "FALSE")
}
Final_data$attributes_Outdoor_Seating<- as.factor(Final_data$attributes_Outdoor_Seating)
for(i in 1:7692)
{
if(length(grep("\"Good For Dancing\": true",Final_data$attributes[i]))>0 )
{
Final_data$attributes_Good_For_Dancing[i] <- "TRUE"
}
else (Final_data$attributes_Good_For_Dancing[i] <- "FALSE")
}
Final_data$attributes_Good_For_Dancing<- as.factor(Final_data$attributes_Good_For_Dancing)
for(i in 1:7692)
{
if(length(grep("\"Wi-Fi\": \"free\"",Final_data$attributes[i]))>0 )
{
Final_data$attributes_Wi_Fi[i] <- "TRUE"
}
else (Final_data$attributes_Wi_Fi[i] <- "FALSE")
}
Final_data$attributes_Wi_Fi<- as.factor(Final_data$attributes_Wi_Fi)
for(i in 1:7692)
{
if(length(grep("\"Caters\": true",Final_data$attributes[i]))>0 )
{
Final_data$attributes_Caters[i] <- "TRUE"
}
else (Final_data$attributes_Caters[i] <- "FALSE")
}
Final_data$attributes_Caters<- as.factor(Final_data$attributes_Caters)
for(i in 1:7692)
{
if(length(grep("\"Noise Level\": \"quiet\"",Final_data$attributes[i]))>0 )
{Final_data$Noise_level[i] <- "Quiet"}
else if(length(grep("\"Noise Level\": \"average\"",Final_data$attributes[i]))>0 )
{ Final_data$Noise_level[i] <- "Average"}
else if(length(grep("\"Noise Level\": \"loud\"",Final_data$attributes[i]))>0 )
{Final_data$Noise_level[i] <- "loud"}
else (Final_data$Noise_level[i] <- "very_loud")
}
Final_data$Noise_level <- as.factor(Final_data$Noise_level)
for(i in 1:7692)
{
if(length(grep("\"Price Range\": 1",Final_data$attributes[i]))>0 )
{Final_data$Price_Range[i] <- "1"}
else if(length(grep("\"Price Range\": 2",Final_data$attributes[i]))>0 )
{ Final_data$Price_Range[i] <- "2"}
else if(length(grep("\"Price Range\": 3",Final_data$attributes[i]))>0 )
{Final_data$Price_Range[i] <- "3"}
else (Final_data$Price_Range[i] <- "4")
}
Final_data$Price_Range <- factor(Final_data$Price_Range, levels = c(1,2,3,4), ordered = T)
for(i in 1:7692)
{
if(length(grep("\"Smoking\": \"no\"",Final_data$attributes[i]))>0 )
{
Final_data$smoking[i] <- "FALSE"
}
else (Final_data$smoking[i] <- "TRUE")
}
Final_data$smoking<- as.factor(Final_data$smoking)
#response variable
for(i in 1:7692)
{
if(Final_data$stars[i] >= 3.5)
{
Final_data$response_variable[i] <- "TRUE"
}
else (Final_data$response_variable[i] <- "FALSE")
}
Final_data$response_variable <- as.factor(Final_data$response_variable)
Final_data <- Final_data[-2,]
set.seed(432)
train <- sample(seq_len(nrow(Final_data)), size = 35900)
Train_data <- Final_data[train,]
Test_data <- Final_data[-train,]
set.seed(432)
train <- sample(seq_len(nrow(Final_data)), size = 6590)
Train_data <- Final_data[train,]
Test_data <- Final_data[-train,]
my_tree_one <- ctree(stars ~ Parking+Good_for_dessert+Good_for_latenight+Good_for_lunch+Good_for_dinner+Good_for_breakfast+Good_for_brunch+Good_for_Groups+Ambience_romantic+Ambience_intimate+Ambience_touristy+Ambience_Classy+Ambience_hipster+Ambience_divey+Ambience_trendy+Ambience_upscale+Ambience_casual+attributes_Take_out+attributes_Takes_Reservations+attributes_Delivery+attributes_Waiter_Service+attributes_Accepts_Credit_Cards+attributes_Has_TV+attributes_Wheelchair_Accessible+attributes_Coat_Check+attributes_Happy_Hour+attributes_Good_for_Kids+attributes_Outdoor_Seating+attributes_Good_For_Dancing+attributes_Wi_Fi+Noise_level+Price_Range+attributes_Caters+longitude+latitude+smoking ,data = Train_data)
stars <- predict(my_tree_one, Test_data)
confusionMatrix(stars,Test_data$stars)
install.packages("tree")
library('tree')
cv.tree(my_tree_one,FUN = prune.tree, k = 10)
class(my_tree_one)
my_tree_one <- tree(stars ~ Parking+Good_for_dessert+Good_for_latenight+Good_for_lunch+Good_for_dinner+Good_for_breakfast+Good_for_brunch+Good_for_Groups+Ambience_romantic+Ambience_intimate+Ambience_touristy+Ambience_Classy+Ambience_hipster+Ambience_divey+Ambience_trendy+Ambience_upscale+Ambience_casual+attributes_Take_out+attributes_Takes_Reservations+attributes_Delivery+attributes_Waiter_Service+attributes_Accepts_Credit_Cards+attributes_Has_TV+attributes_Wheelchair_Accessible+attributes_Coat_Check+attributes_Happy_Hour+attributes_Good_for_Kids+attributes_Outdoor_Seating+attributes_Good_For_Dancing+attributes_Wi_Fi+Noise_level+Price_Range+attributes_Caters+longitude+latitude+smoking ,data = Train_data)
plot(my_tree_one, type = "simple", width = 1900, height = 10000, res = 50,uniform = T, margin = 0.1,use.n=TRUE, all=TRUE, cex=.8)
plot(my_tree_one)
cv.tree(my_tree_one,FUN = prune.tree, k = 10)
stars <- predict(my_tree_one, Test_data)
confusionMatrix(stars,Test_data$stars)
library('RJSONIO')
library('rpart')
library('party')
library('partykit')
library('caret')
library('tree')
confusionMatrix(stars,Test_data$stars)
stars <- predict(my_tree_one, Test_data)
stars <- predict(my_tree_one, Test_data)
confusionMatrix(stars,Test_data$stars)
my_tree_one <- ctree(stars ~ Parking+Good_for_dessert+Good_for_latenight+Good_for_lunch+Good_for_dinner+Good_for_breakfast+Good_for_brunch+Good_for_Groups+Ambience_romantic+Ambience_intimate+Ambience_touristy+Ambience_Classy+Ambience_hipster+Ambience_divey+Ambience_trendy+Ambience_upscale+Ambience_casual+attributes_Take_out+attributes_Takes_Reservations+attributes_Delivery+attributes_Waiter_Service+attributes_Accepts_Credit_Cards+attributes_Has_TV+attributes_Wheelchair_Accessible+attributes_Coat_Check+attributes_Happy_Hour+attributes_Good_for_Kids+attributes_Outdoor_Seating+attributes_Good_For_Dancing+attributes_Wi_Fi+Noise_level+Price_Range+attributes_Caters+longitude+latitude+smoking ,data = Train_data)
stars <- predict(my_tree_one, Test_data)
confusionMatrix(stars,Test_data$stars)
plot(my_tree_one, type = "simple", width = 1900, height = 10000, res = 50,uniform = T, margin = 0.1,use.n=TRUE, all=TRUE, cex=.8)
my_tree_one <- ctree(stars ~ Parking+Good_for_dessert+Good_for_latenight+Good_for_lunch+Good_for_dinner+Good_for_breakfast+Good_for_brunch+Good_for_Groups+Ambience_romantic+Ambience_intimate+Ambience_touristy+Ambience_Classy+Ambience_hipster+Ambience_divey+Ambience_trendy+Ambience_upscale+Ambience_casual+attributes_Take_out+attributes_Takes_Reservations+attributes_Delivery+attributes_Waiter_Service+attributes_Accepts_Credit_Cards+attributes_Has_TV+attributes_Wheelchair_Accessible+attributes_Coat_Check+attributes_Happy_Hour+attributes_Good_for_Kids+attributes_Outdoor_Seating+attributes_Good_For_Dancing+attributes_Wi_Fi+Noise_level+Price_Range+attributes_Caters+longitude+latitude+smoking ,data = Train_data)
plot(my_tree_one, type = "simple", width = 1900, height = 10000, res = 50,uniform = T, margin = 0.1,use.n=TRUE, all=TRUE, cex=.8)
my_tree_one <- ctree(stars ~ Parking+Good_for_dessert+Good_for_latenight+Good_for_lunch+Good_for_dinner+Good_for_breakfast+Good_for_brunch+Good_for_Groups+Ambience_romantic+Ambience_intimate+Ambience_touristy+Ambience_Classy+Ambience_hipster+Ambience_divey+Ambience_trendy+Ambience_upscale+Ambience_casual+attributes_Take_out+attributes_Takes_Reservations+attributes_Delivery+attributes_Waiter_Service+attributes_Accepts_Credit_Cards+attributes_Has_TV+attributes_Wheelchair_Accessible+attributes_Coat_Check+attributes_Happy_Hour+attributes_Good_for_Kids+attributes_Outdoor_Seating+attributes_Good_For_Dancing+attributes_Wi_Fi+Noise_level+Price_Range+attributes_Caters+smoking ,data = Train_data)
plot(my_tree_one, type = "simple", width = 1900, height = 10000, res = 50,uniform = T, margin = 0.1,use.n=TRUE, all=TRUE, cex=.8)
plot(my_tree_one, type = "simple", width = 1900, height = 10000, res = 50,uniform = T, margin = 0.1,use.n=TRUE, all=TRUE, cex=.8)
plot(my_tree_one, type = "simple", width = 1900, height = 10000, res = 50,uniform = T, margin = 0.1,use.n=TRUE, all=TRUE, cex=.8)
my_tree_one <- ctree(stars ~ Parking+Good_for_dessert+Good_for_latenight+Good_for_lunch+Good_for_dinner+Good_for_breakfast+Good_for_brunch+Good_for_Groups+Ambience_romantic+Ambience_intimate+Ambience_touristy+Ambience_Classy+Ambience_hipster+Ambience_divey+Ambience_trendy+Ambience_upscale+Ambience_casual+attributes_Take_out+attributes_Takes_Reservations+attributes_Delivery+attributes_Waiter_Service+attributes_Accepts_Credit_Cards+attributes_Has_TV+attributes_Wheelchair_Accessible+attributes_Coat_Check+attributes_Happy_Hour+attributes_Good_for_Kids+attributes_Outdoor_Seating+attributes_Good_For_Dancing+attributes_Wi_Fi+Noise_level+Price_Range+smoking ,data = Train_data)
plot(my_tree_one, type = "simple", width = 1900, height = 10000, res = 50,uniform = T, margin = 0.1,use.n=TRUE, all=TRUE, cex=.8)
my_tree_one <- ctree(stars ~ Parking+Good_for_dessert+Good_for_latenight+Good_for_lunch+Good_for_dinner+Good_for_breakfast+Good_for_brunch+Good_for_Groups+Ambience_romantic+Ambience_intimate+Ambience_touristy+Ambience_Classy+Ambience_hipster+Ambience_divey+Ambience_trendy+Ambience_upscale+Ambience_casual+attributes_Take_out+attributes_Takes_Reservations+attributes_Delivery+attributes_Waiter_Service+attributes_Accepts_Credit_Cards+attributes_Has_TV+attributes_Wheelchair_Accessible+attributes_Coat_Check+attributes_Happy_Hour+attributes_Good_for_Kids+attributes_Outdoor_Seating+attributes_Good_For_Dancing+attributes_Wi_Fi+Noise_level+Price_Range+smoking ,data = Train_data)
plot(my_tree_one, type = "simple", width = 1900, height = 10000, res = 50,uniform = T, margin = 0.1,use.n=TRUE, all=TRUE, cex=.8)
stars <- predict(my_tree_one, Test_data)
confusionMatrix(stars,Test_data$stars)
for(i in 1:7691)
{
if(Final_data$stars[i] >= 4)
{
Final_data$response_variable[i] <- "TRUE"
}
else (Final_data$response_variable[i] <- "FALSE")
}
Final_data$response_variable <- as.factor(Final_data$response_variable)
set.seed(432)
train <- sample(seq_len(nrow(Final_data)), size = 6590)
Train_data <- Final_data[train,]
Test_data <- Final_data[-train,]
my_tree_one <- ctree(response_variable ~ Parking+Good_for_dessert+Good_for_latenight+Good_for_lunch+Good_for_dinner+Good_for_breakfast+Good_for_brunch+Good_for_Groups+Ambience_romantic+Ambience_intimate+Ambience_touristy+Ambience_Classy+Ambience_hipster+Ambience_divey+Ambience_trendy+Ambience_upscale+Ambience_casual+attributes_Take_out+attributes_Takes_Reservations+attributes_Delivery+attributes_Waiter_Service+attributes_Accepts_Credit_Cards+attributes_Has_TV+attributes_Wheelchair_Accessible+attributes_Coat_Check+attributes_Happy_Hour+attributes_Good_for_Kids+attributes_Outdoor_Seating+attributes_Good_For_Dancing+attributes_Wi_Fi+Noise_level+Price_Range+smoking ,data = Train_data)
plot(my_tree_one, type = "simple", width = 1900, height = 10000, res = 50,uniform = T, margin = 0.1,use.n=TRUE, all=TRUE, cex=.8)
stars <- predict(my_tree_one, Test_data)
confusionMatrix(stars,Test_data$stars)
confusionMatrix(stars,Test_data$response_variable)
library('RJSONIO')
library('rpart')
library('party')
library('partykit')
library('caret')
library('tree')
my_tree_two <- rpart(stars ~ Parking+Good_for_dessert+Good_for_latenight+Good_for_lunch+Good_for_dinner+Good_for_breakfast+Good_for_brunch+Good_for_Groups+Ambience_romantic+Ambience_intimate+Ambience_touristy+Ambience_Classy+Ambience_hipster+Ambience_divey+Ambience_trendy+Ambience_upscale+Ambience_casual+attributes_Take_out+attributes_Takes_Reservations+attributes_Delivery+attributes_Waiter_Service+attributes_Accepts_Credit_Cards+attributes_Has_TV+attributes_Wheelchair_Accessible+attributes_Coat_Check+attributes_Happy_Hour+attributes_Good_for_Kids+attributes_Outdoor_Seating+attributes_Good_For_Groups+attributes_Good_For_Dancing+attributes_Wi_Fi+Noise_level+Price_Range ,data = Final_data, control = rpart.control(minsplit = 20,cp=0))
my_tree_two <- rpart(response_variable ~ Parking+Good_for_dessert+Good_for_latenight+Good_for_lunch+Good_for_dinner+Good_for_breakfast+Good_for_brunch+Good_for_Groups+Ambience_romantic+Ambience_intimate+Ambience_touristy+Ambience_Classy+Ambience_hipster+Ambience_divey+Ambience_trendy+Ambience_upscale+Ambience_casual+attributes_Take_out+attributes_Takes_Reservations+attributes_Delivery+attributes_Waiter_Service+attributes_Accepts_Credit_Cards+attributes_Has_TV+attributes_Wheelchair_Accessible+attributes_Coat_Check+attributes_Happy_Hour+attributes_Good_for_Kids+attributes_Outdoor_Seating+attributes_Good_For_Dancing+attributes_Wi_Fi+Noise_level+Price_Range+smoking,data = Final_data, control = rpart.control(minsplit = 20,cp=0))
fancyRpartPlot(my_tree_two)
library('RJSONIO')
library('rpart')
library('party')
library('partykit')
library('caret')
library('tree')
plot(my_tree_two)
fancyRpartPlot(my_tree_two)
install.packages("rattle")
library('rattle')
fancyRpartPlot(my_tree_two)
my_tree_two <- rpart(response_variable ~ Parking+Good_for_dessert+Good_for_latenight+Good_for_lunch+Good_for_dinner+Good_for_breakfast+Good_for_brunch+Good_for_Groups+Ambience_romantic+Ambience_intimate+Ambience_touristy+Ambience_Classy+Ambience_hipster+Ambience_divey+Ambience_trendy+Ambience_upscale+Ambience_casual+attributes_Take_out+attributes_Takes_Reservations+attributes_Delivery+attributes_Waiter_Service+attributes_Accepts_Credit_Cards+attributes_Has_TV+attributes_Wheelchair_Accessible+attributes_Coat_Check+attributes_Happy_Hour+attributes_Good_for_Kids+attributes_Outdoor_Seating+attributes_Good_For_Dancing+attributes_Wi_Fi+Noise_level+Price_Range+smoking,data = Final_data)
plot(my_tree_two)
fancyRpartPlot(my_tree_two)
plot(my_tree_one, type = "simple", width = 1900, height = 1000, res = 50,uniform = T, margin = 0,use.n=TRUE, all=TRUE, cex=.8)
plot(my_tree_one, type = "simple", width = 2000, height = 1000, res = 50,uniform = T, margin = 0,use.n=TRUE, all=TRUE, cex=.8)
View(business_data)
plot(business_data[which(business_data$city == C("Las Vegas"),],average(stars))
plot(business_data[which(business_data$city == C("Las Vegas"),average(stars))
]
)
plot(business_data$city,business_data$stars)
View(business_data)
lines <- readLines("E:/R backup/test_project/yelp/yelp_academic_dataset_business.json")
business_data <- as.data.frame(t(sapply(readLines("E:/R backup/test_project/yelp/yelp_academic_dataset_business.json"), fromJSON)))
library('RJSONIO')
library('rpart')
library('party')
library('partykit')
library('caret')
library('tree')
lines <- readLines("E:/R backup/test_project/yelp/yelp_academic_dataset_business.json")
business_data <- as.data.frame(t(sapply(readLines("E:/R backup/test_project/yelp/yelp_academic_dataset_business.json"), fromJSON)))
states <- data.frame(business_data = unique(business_data$state))
for (i in 1:11)
{
states$review_count[i] <- mean(busness_data$review_count[business_data$state == states$states[i]],na.rm = TRUE)
}
for (i in 1:11)
{
states$review_count[i] <- mean(business_data$review_count[business_data$state == states$states[i]],na.rm = TRUE)
}
View(states)
states <- unique(business_data$state))
states <- unique(business_data$state)
states <- data.frame(unique(business_data$state))
View(states)
View(business_data)
states <- data.frame(states_unique = unique(business_data$state))
View(states)
install.packages("leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")
addTiles() %>%
addRectangles(
lng1=80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent"
)
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")
addRectangles(
lng1=80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent"
)
m  # Print the map
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")
m <- leaflet() %>%
addTiles() %>%
addRectangles(
lng1=80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent"
)
m  # Pr
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")
m <- leaflet() %>%
addTiles() %>%
addRectangles(
lng1=-80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent"
)
m  # Print the map
m <- leaflet() %>%
addTiles() %>%
addRectangles(
lng1=-80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent",
popup = "carnegie Mello University"
)
m  # Print the map
m < leaflet() %>%
addTiles() %>%
addRectangles(
lng1=-80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent",
popup = "carnegie Mello University"
)addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")
m  # Print the map
```
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")%>%
addRectangles(
lng1=-80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent",
popup = "carnegie Mello University"
)
m  # Print the map
Top_10 <- business_data[business_data$state == "PA" & business_data$latitude < 40.532540 & business_data$latitude > 40.37061262 & business_data$longitude > -80.037803 & business_data$longitude < -79.846916,]
View(Top_10)
View(Top_10)
m <- leaflet(Top_10)%>%
addCircles(lng = ~Longitude, lat = ~Latitude, weight = 1,
radius = 30, popup = ~name
)
m <- leaflet(Top_10)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = 30, popup = ~name
)
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")%>%
addRectangles(
lng1=-80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent"
)%>%
leaflet(Top_10)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = 1, popup = ~name
)
m <- leaflet(Top_10)
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")%>%
addRectangles(
lng1=-80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent"
)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = 1, popup = ~name
)
m
m <- leaflet(Top_10)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = 30, popup = ~name
)
m
m <- leaflet(Top_10)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = review_count*2, popup = ~name
)
m
m <- leaflet(Top_10)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~review_count*2, popup = ~name
)
m
m <- leaflet(Top_10)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = int(~review_count)*2, popup = ~name
)
m
m <- leaflet(Top_10)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = as.numeric(~review_count)*2, popup = ~name
)
Top_10$review_count<-as.numeric(Top_10$review_count)
m <- leaflet(Top_10)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~review_count*2, popup = ~name
)
m
Top_10$review_count<-as.numeric(Top_10$review_count)
Top_10$latitude<-as.numeric(Top_10$latitude)
Top_10$longitude<-as.numeric(Top_10$longitude)
m <- leaflet(Top_10)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~review_count*2, popup = ~name
)
m
m <- leaflet(Top_10)
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")%>%
addRectangles(
lng1=-80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent"
)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = 1, popup = ~name
)
m
m <- leaflet(Top_10)
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = 1, popup = ~name
)%>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")%>%
addRectangles(
lng1=-80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent"
)
m
m <- leaflet(Top_10)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = 1, popup = ~name
)%>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")%>%
addRectangles(
lng1=-80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent"
)
m
m <- leaflet(Top_10)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = review_count*2, popup = ~name
)%>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")%>%
addRectangles(
lng1=-80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent"
)
m
m <- leaflet(Top_10)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~review_count*2, popup = ~name
)%>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")%>%
addRectangles(
lng1=-80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent"
)
m
m <- leaflet(Top_10)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~review_count*2, popup = ~name
)%>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")%>%
addRectangles(
lng1=-80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent"
)
m  # Print the map
library('RJSONIO')
library('rpart')
library('party')
library('partykit')
library('caret')
library('tree')
library(leaflet)
m <- leaflet(Top_10)%>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~review_count*2, popup = ~name
)%>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-79.9428294, lat=40.4411801, popup="Carnegie Mellon University")%>%
addRectangles(
lng1=-80.037803, lat1=40.532540,
lng2=-79.846916, lat2= 40.37061262,
fillColor = "transparent"
)
m  # Print the map
lines <- readLines("E:/R backup/test_project/yelp/yelp_academic_dataset_review.json")
review <- as.data.frame(t(sapply(readLines("E:/R backup/test_project/yelp/yelp_academic_dataset_review.json"), fromJSON)))
